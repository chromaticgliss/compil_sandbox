/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;
terminal		UMINUS;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal LinkedList       varDeclList;
non terminal FnDeclNode       fnDecl;
non terminal LinkedList       formals;
non terminal LinkedList	      formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList	      stmtList;
non terminal StmtNode         stmt;
non terminal CallExpNode      fncall;
non terminal ExpNode          exp;
non terminal AssignNode	      assign_exp;
non terminal ExpNode	      term;
non terminal LinkedList       actualList;
non terminal TypeNode	      type;
non terminal IdNode	      id;

/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;
precedence left PLUSPLUS, MINUSMINUS, NOT, UMINUS;


start with program;

/* grammar with actions
 *
 * NOTE: add more grammar rules below
 */

program		::= declList: d
		{: 
		   RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: 
		   dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: 
		   RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::= varDecl:v
		{: 
		   RESULT = v;
		:}
		| fnDecl:f
		{: RESULT = f;
		:}
		;

varDeclList 	::= varDeclList:vl varDecl:v
		{:
		   vl.addLast(v);
		   RESULT = vl;
		:}
		| /* epsilon */
		{:
		   RESULT = new LinkedList<VarDeclNode>();
		:}
		;

varDecl		::= type:t id:i SEMICOLON
		{: 
                   RESULT = new VarDeclNode(t, i);
		:}
		;

fnDecl		::= type:t id:i formals:f fnBody:body
		{: RESULT = new FnDeclNode(t, i, new FormalsListNode(f), body);
		:}
		;
		
formals		::= LPAREN RPAREN
		{: RESULT = new LinkedList<FormalDeclNode>(); :}
		|
		LPAREN formalsList:f RPAREN
		{: RESULT = f; :}
		;
		
formalsList	::= formalDecl:f
		{:
		    LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
		    fl.add(f);
		    RESULT = fl;
		:}
		|
		formalDecl:fdcl COMMA formalsList:flst
		{: 
		    flst.add(fdcl);
		    RESULT = flst;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t,i); :}
		;

fnBody		::= LCURLY varDeclList:varlst stmtList:stmt RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(varlst),new StmtListNode(stmt)); :}
		;

stmtList	::= stmtList:lst stmt:st
		{:
		    lst.addLast(st);
		    RESULT = lst;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<StmtListNode>(); :}
		;
		
stmt		::= assign_exp:a SEMICOLON
		{: RESULT = new AssignStmtNode(a); :}
		|
		PLUSPLUS id:i SEMICOLON
		{: RESULT = new PreIncStmtNode(i); :}
		|
		MINUSMINUS id:i SEMICOLON
		{: RESULT = new PreDecStmtNode(i); :}
		|
		id:i PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(i); :}
		|
		id:i MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(i); :}
		|
		SCANF LPAREN INT_FORMAT COMMA AMPERSAND id:i RPAREN SEMICOLON
		{: RESULT = new ReadIntStmtNode(i); :}
		|
		SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id:i RPAREN SEMICOLON
		{: RESULT = new ReadDblStmtNode(i); :}
		|
		PRINTF LPAREN INT_FORMAT COMMA exp:e RPAREN SEMICOLON
		{: RESULT = new WriteIntStmtNode(e); :}
		|
		PRINTF LPAREN DBL_FORMAT COMMA exp:e RPAREN SEMICOLON
		{: RESULT = new WriteDblStmtNode(e); :}
		|
		PRINTF LPAREN STRINGLITERAL:str RPAREN SEMICOLON
		{: RESULT = new WriteStrStmtNode(new StringLitNode(str.linenum,str.charnum,str.strVal)); :}
		|
		IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
		{: RESULT = new IfStmtNode(e,new DeclListNode(v),new StmtListNode(s)); :}
		|
		IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY ELSE LCURLY varDeclList:ev stmtList:es RCURLY
		{: RESULT = new IfElseStmtNode(e,new DeclListNode(v),new StmtListNode(s),new DeclListNode(ev),new StmtListNode(es)); :}
		|
		WHILE LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
		{: RESULT = new WhileStmtNode(e,new DeclListNode(v),new StmtListNode(s)); :}
		|
		RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e); :}
		|
		RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null); :}
		|
		fncall:f SEMICOLON
		{: RESULT = new CallStmtNode(f); :}
		;		


fncall		::=  id:i LPAREN RPAREN
		{: RESULT = new CallExpNode(i,null); :}
	        | id:i LPAREN actualList:al RPAREN
		{: RESULT = new CallExpNode(i,new ExpListNode(al)); :}
		;

exp		::= assign_exp:ae
		{: RESULT = ae; :}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1,e2); :}
	        | exp:e1 MINUS exp:e2
	        {: RESULT = new MinusNode(e1,e2); :}
	        | exp:e1 STAR exp:e2
	        {: RESULT = new TimesNode(e1,e2); :}
	        | exp:e1 DIVIDE exp:e2
	        {: RESULT = new DivideNode(e1,e2); :}
	        | NOT exp:e
	        {: RESULT = new NotNode(e); :}
	        | exp:e1 AND exp:e2
	        {: RESULT = new AndNode(e1,e2); :}
	        | exp:e1 OR exp:e2
	        {: RESULT = new OrNode(e1,e2); :}
		| exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1,e2); :}
		| exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1,e2); :}
		| exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1,e2); :}
		| exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1,e2); :}
		| exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1,e2); :}
		| exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1,e2); :}
		| MINUS term:t
		{: RESULT = new UnaryMinusNode(t); :} %prec UMINUS
		| term:t
		{: RESULT = t; :}
		;

assign_exp	::= id:i ASSIGN exp:e
		{: RESULT = new AssignNode(i,e); :}
		;

term		::= id:i
		{: RESULT = i; :} 
		| id:i PLUSPLUS
		{: RESULT = new PlusPlusNode(i); :}
		| id:i MINUSMINUS
		{: RESULT = new MinusMinusNode(i); :}
	        | INTLITERAL:i
	        {: RESULT = new IntLitNode(i.linenum,i.charnum,i.intVal); :}
	        | DBLLITERAL:d
	        {: RESULT = new DblLitNode(d.linenum,d.charnum,d.dblVal); :}
	        | STRINGLITERAL:s
	        {: RESULT = new StringLitNode(s.linenum,s.charnum,s.strVal); :}
	        | LPAREN exp:e RPAREN
	        {: RESULT = e; :}
		| fncall:f
		{: RESULT = f; :}
		;

actualList	::= exp:e
		{:   LinkedList<ExpNode> ll = new LinkedList<ExpNode>();
		     ll.addLast(e); 
		     RESULT = ll;
		:}
		| actualList:al COMMA exp:e
		{: 
		     al.addLast(e);
		     RESULT = al; 
		:}
		;

type		::= INT
		{: RESULT = new IntNode(); :}
		| DBL
		{: RESULT = new DblNode(); :}
		| VOID
		{: RESULT = new VoidNode(); :}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
